{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\nvar stripAnsi = require('strip-ansi');\nvar term = 13; // carriage return\n\n/**\n * create -- sync function for reading user input from stdin\n * @param   {Object} config {\n *   sigint: {Boolean} exit on ^C\n *   autocomplete: {StringArray} function({String})\n *   history: {String} a history control object (see `prompt-sync-history`)\n * }\n * @returns {Function} prompt function\n */\n\n// for ANSI escape codes reference see https://en.wikipedia.org/wiki/ANSI_escape_code\n\nfunction create(config) {\n  config = config || {};\n  var sigint = config.sigint;\n  var eot = config.eot;\n  var autocomplete = config.autocomplete = config.autocomplete || function () {\n    return [];\n  };\n  var history = config.history;\n  prompt.history = history || {\n    save: function () {}\n  };\n  prompt.hide = function (ask) {\n    return prompt(ask, {\n      echo: ''\n    });\n  };\n  return prompt;\n\n  /**\n   * prompt -- sync function for reading user input from stdin\n   *  @param {String} ask opening question/statement to prompt for\n   *  @param {String} value initial value for the prompt\n   *  @param   {Object} opts {\n   *   echo: set to a character to be echoed, default is '*'. Use '' for no echo\n   *   value: {String} initial value for the prompt\n   *   ask: {String} opening question/statement to prompt for, does not override ask param\n   *   autocomplete: {StringArray} function({String})\n   * }\n   *\n   * @returns {string} Returns the string input or (if sigint === false)\n   *                   null if user terminates with a ^C\n   */\n\n  function prompt(ask, value, opts) {\n    var insert = 0,\n      savedinsert = 0,\n      res,\n      i,\n      savedstr;\n    opts = opts || {};\n    if (Object(ask) === ask) {\n      opts = ask;\n      ask = opts.ask;\n    } else if (Object(value) === value) {\n      opts = value;\n      value = opts.value;\n    }\n    ask = ask || '';\n    var echo = opts.echo;\n    var masked = ('echo' in opts);\n    autocomplete = opts.autocomplete || autocomplete;\n    var fd = process.platform === 'win32' ? process.stdin.fd : fs.openSync('/dev/tty', 'rs');\n    var wasRaw = process.stdin.isRaw;\n    if (!wasRaw) {\n      process.stdin.setRawMode && process.stdin.setRawMode(true);\n    }\n    var buf = Buffer.alloc(3);\n    var str = '',\n      character,\n      read;\n    savedstr = '';\n    if (ask) {\n      process.stdout.write(ask);\n    }\n    var cycle = 0;\n    var prevComplete;\n    while (true) {\n      read = fs.readSync(fd, buf, 0, 3);\n      if (read > 1) {\n        // received a control sequence\n        switch (buf.toString()) {\n          case '\\u001b[A':\n            //up arrow\n            if (masked) break;\n            if (!history) break;\n            if (history.atStart()) break;\n            if (history.atEnd()) {\n              savedstr = str;\n              savedinsert = insert;\n            }\n            str = history.prev();\n            insert = str.length;\n            process.stdout.write('\\u001b[2K\\u001b[0G' + ask + str);\n            break;\n          case '\\u001b[B':\n            //down arrow\n            if (masked) break;\n            if (!history) break;\n            if (history.pastEnd()) break;\n            if (history.atPenultimate()) {\n              str = savedstr;\n              insert = savedinsert;\n              history.next();\n            } else {\n              str = history.next();\n              insert = str.length;\n            }\n            process.stdout.write('\\u001b[2K\\u001b[0G' + ask + str + '\\u001b[' + (insert + ask.length + 1) + 'G');\n            break;\n          case '\\u001b[D':\n            //left arrow\n            if (masked) break;\n            var before = insert;\n            insert = --insert < 0 ? 0 : insert;\n            if (before - insert) process.stdout.write('\\u001b[1D');\n            break;\n          case '\\u001b[C':\n            //right arrow\n            if (masked) break;\n            insert = ++insert > str.length ? str.length : insert;\n            process.stdout.write('\\u001b[' + (insert + ask.length + 1) + 'G');\n            break;\n          default:\n            if (buf.toString()) {\n              str = str + buf.toString();\n              str = str.replace(/\\0/g, '');\n              insert = str.length;\n              promptPrint(masked, ask, echo, str, insert);\n              process.stdout.write('\\u001b[' + (insert + ask.length + 1) + 'G');\n              buf = Buffer.alloc(3);\n            }\n        }\n        continue; // any other 3 character sequence is ignored\n      }\n\n      // if it is not a control character seq, assume only one character is read\n      character = buf[read - 1];\n\n      // catch a ^C and return null\n      if (character == 3) {\n        process.stdout.write('^C\\n');\n        fs.closeSync(fd);\n        if (sigint) process.exit(130);\n        process.stdin.setRawMode && process.stdin.setRawMode(wasRaw);\n        return null;\n      }\n\n      // catch a ^D and exit\n      if (character == 4) {\n        if (str.length == 0 && eot) {\n          process.stdout.write('exit\\n');\n          process.exit(0);\n        }\n      }\n\n      // catch the terminating character\n      if (character == term) {\n        fs.closeSync(fd);\n        if (!history) break;\n        if (!masked && str.length) history.push(str);\n        history.reset();\n        break;\n      }\n\n      // catch a TAB and implement autocomplete\n      if (character == 9) {\n        // TAB\n        res = autocomplete(str);\n        if (str == res[0]) {\n          res = autocomplete('');\n        } else {\n          prevComplete = res.length;\n        }\n        if (res.length == 0) {\n          process.stdout.write('\\t');\n          continue;\n        }\n        var item = res[cycle++] || res[(cycle = 0, cycle++)];\n        if (item) {\n          process.stdout.write('\\r\\u001b[K' + ask + item);\n          str = item;\n          insert = item.length;\n        }\n      }\n      if (character == 127 || process.platform == 'win32' && character == 8) {\n        //backspace\n        if (!insert) continue;\n        str = str.slice(0, insert - 1) + str.slice(insert);\n        insert--;\n        process.stdout.write('\\u001b[2D');\n      } else {\n        if (character < 32 || character > 126) continue;\n        str = str.slice(0, insert) + String.fromCharCode(character) + str.slice(insert);\n        insert++;\n      }\n      ;\n      promptPrint(masked, ask, echo, str, insert);\n    }\n    process.stdout.write('\\n');\n    process.stdin.setRawMode && process.stdin.setRawMode(wasRaw);\n    return str || value || '';\n  }\n  ;\n  function promptPrint(masked, ask, echo, str, insert) {\n    if (masked) {\n      process.stdout.write('\\u001b[2K\\u001b[0G' + ask + Array(str.length + 1).join(echo));\n    } else {\n      process.stdout.write('\\u001b[s');\n      if (insert == str.length) {\n        process.stdout.write('\\u001b[2K\\u001b[0G' + ask + str);\n      } else {\n        if (ask) {\n          process.stdout.write('\\u001b[2K\\u001b[0G' + ask + str);\n        } else {\n          process.stdout.write('\\u001b[2K\\u001b[0G' + str + '\\u001b[' + (str.length - insert) + 'D');\n        }\n      }\n\n      // Reposition the cursor to the right of the insertion point\n      var askLength = stripAnsi(ask).length;\n      process.stdout.write(`\\u001b[${askLength + 1 + (echo == '' ? 0 : insert)}G`);\n    }\n  }\n}\n;\nmodule.exports = create;","map":{"version":3,"names":["fs","require","stripAnsi","term","create","config","sigint","eot","autocomplete","history","prompt","save","hide","ask","echo","value","opts","insert","savedinsert","res","i","savedstr","Object","masked","fd","process","platform","stdin","openSync","wasRaw","isRaw","setRawMode","buf","Buffer","alloc","str","character","read","stdout","write","cycle","prevComplete","readSync","toString","atStart","atEnd","prev","length","pastEnd","atPenultimate","next","before","replace","promptPrint","closeSync","exit","push","reset","item","slice","String","fromCharCode","Array","join","askLength","module","exports"],"sources":["C:/Users/vladi/node_modules/prompt-sync/index.js"],"sourcesContent":["'use strict'\n\nvar fs = require('fs');\nvar stripAnsi = require('strip-ansi');\nvar term = 13; // carriage return\n\n/**\n * create -- sync function for reading user input from stdin\n * @param   {Object} config {\n *   sigint: {Boolean} exit on ^C\n *   autocomplete: {StringArray} function({String})\n *   history: {String} a history control object (see `prompt-sync-history`)\n * }\n * @returns {Function} prompt function\n */\n\n // for ANSI escape codes reference see https://en.wikipedia.org/wiki/ANSI_escape_code\n\nfunction create(config) {\n\n  config = config || {};\n  var sigint = config.sigint;\n  var eot = config.eot;\n  var autocomplete = config.autocomplete =\n    config.autocomplete || function(){return []};\n  var history = config.history;\n  prompt.history = history || {save: function(){}};\n  prompt.hide = function (ask) { return prompt(ask, {echo: ''}) };\n\n  return prompt;\n\n\n  /**\n   * prompt -- sync function for reading user input from stdin\n   *  @param {String} ask opening question/statement to prompt for\n   *  @param {String} value initial value for the prompt\n   *  @param   {Object} opts {\n   *   echo: set to a character to be echoed, default is '*'. Use '' for no echo\n   *   value: {String} initial value for the prompt\n   *   ask: {String} opening question/statement to prompt for, does not override ask param\n   *   autocomplete: {StringArray} function({String})\n   * }\n   *\n   * @returns {string} Returns the string input or (if sigint === false)\n   *                   null if user terminates with a ^C\n   */\n\n\n  function prompt(ask, value, opts) {\n    var insert = 0, savedinsert = 0, res, i, savedstr;\n    opts = opts || {};\n\n    if (Object(ask) === ask) {\n      opts = ask;\n      ask = opts.ask;\n    } else if (Object(value) === value) {\n      opts = value;\n      value = opts.value;\n    }\n    ask = ask || '';\n    var echo = opts.echo;\n    var masked = 'echo' in opts;\n    autocomplete = opts.autocomplete || autocomplete;\n\n    var fd = (process.platform === 'win32') ?\n      process.stdin.fd :\n      fs.openSync('/dev/tty', 'rs');\n\n    var wasRaw = process.stdin.isRaw;\n    if (!wasRaw) { process.stdin.setRawMode && process.stdin.setRawMode(true); }\n\n    var buf = Buffer.alloc(3);\n    var str = '', character, read;\n\n    savedstr = '';\n\n    if (ask) {\n      process.stdout.write(ask);\n    }\n\n    var cycle = 0;\n    var prevComplete;\n\n    while (true) {\n      read = fs.readSync(fd, buf, 0, 3);\n      if (read > 1) { // received a control sequence\n        switch(buf.toString()) {\n          case '\\u001b[A':  //up arrow\n            if (masked) break;\n            if (!history) break;\n            if (history.atStart()) break;\n\n            if (history.atEnd()) {\n              savedstr = str;\n              savedinsert = insert;\n            }\n            str = history.prev();\n            insert = str.length;\n            process.stdout.write('\\u001b[2K\\u001b[0G' + ask + str);\n            break;\n          case '\\u001b[B':  //down arrow\n            if (masked) break;\n            if (!history) break;\n            if (history.pastEnd()) break;\n\n            if (history.atPenultimate()) {\n              str = savedstr;\n              insert = savedinsert;\n              history.next();\n            } else {\n              str = history.next();\n              insert = str.length;\n            }\n            process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str + '\\u001b['+(insert+ask.length+1)+'G');\n            break;\n          case '\\u001b[D': //left arrow\n            if (masked) break;\n            var before = insert;\n            insert = (--insert < 0) ? 0 : insert;\n            if (before - insert)\n              process.stdout.write('\\u001b[1D');\n            break;\n          case '\\u001b[C': //right arrow\n            if (masked) break;\n            insert = (++insert > str.length) ? str.length : insert;\n            process.stdout.write('\\u001b[' + (insert+ask.length+1) + 'G');\n            break;\n          default:\n            if (buf.toString()) {\n              str = str + buf.toString();\n              str = str.replace(/\\0/g, '');\n              insert = str.length;\n              promptPrint(masked, ask, echo, str, insert);\n              process.stdout.write('\\u001b[' + (insert+ask.length+1) + 'G');\n              buf = Buffer.alloc(3);\n            }\n        }\n        continue; // any other 3 character sequence is ignored\n      }\n\n      // if it is not a control character seq, assume only one character is read\n      character = buf[read-1];\n\n      // catch a ^C and return null\n      if (character == 3){\n        process.stdout.write('^C\\n');\n        fs.closeSync(fd);\n\n        if (sigint) process.exit(130);\n\n        process.stdin.setRawMode && process.stdin.setRawMode(wasRaw);\n\n        return null;\n      }\n\n      // catch a ^D and exit\n      if (character == 4) {\n        if (str.length == 0 && eot) {\n          process.stdout.write('exit\\n');\n          process.exit(0);\n        }\n      }\n\n      // catch the terminating character\n      if (character == term) {\n        fs.closeSync(fd);\n        if (!history) break;\n        if (!masked && str.length) history.push(str);\n        history.reset();\n        break;\n      }\n\n      // catch a TAB and implement autocomplete\n      if (character == 9) { // TAB\n        res = autocomplete(str);\n\n        if (str == res[0]) {\n          res = autocomplete('');\n        } else {\n          prevComplete = res.length;\n        }\n\n        if (res.length == 0) {\n          process.stdout.write('\\t');\n          continue;\n        }\n\n        var item = res[cycle++] || res[cycle = 0, cycle++];\n\n        if (item) {\n          process.stdout.write('\\r\\u001b[K' + ask + item);\n          str = item;\n          insert = item.length;\n        }\n      }\n\n      if (character == 127 || (process.platform == 'win32' && character == 8)) { //backspace\n        if (!insert) continue;\n        str = str.slice(0, insert-1) + str.slice(insert);\n        insert--;\n        process.stdout.write('\\u001b[2D');\n      } else {\n        if ((character < 32 ) || (character > 126))\n            continue;\n        str = str.slice(0, insert) + String.fromCharCode(character) + str.slice(insert);\n        insert++;\n      };\n\n      promptPrint(masked, ask, echo, str, insert);\n\n    }\n\n    process.stdout.write('\\n')\n\n    process.stdin.setRawMode && process.stdin.setRawMode(wasRaw);\n\n    return str || value || '';\n  };\n\n\n  function promptPrint(masked, ask, echo, str, insert) {\n    if (masked) {\n        process.stdout.write('\\u001b[2K\\u001b[0G' + ask + Array(str.length+1).join(echo));\n    } else {\n      process.stdout.write('\\u001b[s');\n      if (insert == str.length) {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str);\n      } else {\n        if (ask) {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str);\n        } else {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ str + '\\u001b[' + (str.length - insert) + 'D');\n        }\n      }\n\n      // Reposition the cursor to the right of the insertion point\n      var askLength = stripAnsi(ask).length;\n      process.stdout.write(`\\u001b[${askLength+1+(echo==''? 0:insert)}G`);\n    }\n  }\n};\n\nmodule.exports = create;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}